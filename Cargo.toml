[package]
name = "tailwind"
version = "0.1.0"
edition = "2021"
description = "A fast, modern blog built with Rust and Leptos"
license = "MIT"
repository = "https://github.com/m4nyu/blog"
keywords = ["blog", "leptos", "rust", "wasm", "web"]
categories = ["web-programming", "wasm"]

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
leptos = { version = "0.5.7" }
leptos_actix = { version = "0.5.7", optional = true }
leptos_meta = { version = "0.5.7" }
leptos_router = { version = "0.5.7" }
tracing = "0.1"
pulldown-cmark = "0.9"
regex = "1.10"
html-escape = "0.2"
rand = "0.8"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_yaml = "0.9"
chrono = { version = "0.4", features = ["serde"] }
gray_matter = "0.2"
tokio = { version = "1", features = ["fs"], optional = true }
futures = { version = "0.3", optional = true }
wasm-bindgen-futures = { version = "0.4", optional = true }
gloo-utils = { version = "0.1", optional = true }

# dependencies for browser (enable when hydrate set)
console_error_panic_hook = { version = "0.1.7", optional = true }
wasm-bindgen = { version = "0.2.93", optional = true }
gloo-timers = { version = "0.3", features = ["futures"], optional = true }
web-sys = { version = "0.3", features = ["CanvasRenderingContext2d", "HtmlCanvasElement", "Window", "MouseEvent", "Element", "DomRect", "Storage", "MediaQueryList", "console", "Navigator", "ShareData", "Clipboard", "Location"], optional = true }
js-sys = { version = "0.3", optional = true }

# dependencies for server (enable when ssr set)
actix-files = { version = "0.6.6", optional = true }
actix-web = { version = "4.8", features = ["macros"], optional = true }
shuttle-actix-web = { version = "0.56", optional = true }
shuttle-runtime = { version = "0.56", optional = true }

[features]
hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate", "dep:wasm-bindgen", "dep:console_error_panic_hook", "dep:gloo-timers", "dep:web-sys", "dep:js-sys", "dep:futures", "dep:wasm-bindgen-futures", "dep:gloo-utils"]
ssr = [
  "leptos/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
  "dep:leptos_actix",
  "dep:actix-web",
  "dep:actix-files",
  "dep:tokio",
  "dep:shuttle-actix-web",
  "dep:shuttle-runtime",
]

[package.metadata.cargo-all-features]
denylist = [
  "actix-files",
  "actix-web",
  "console_error_panic_hook",
  "leptos_actix",
  "wasm-bindgen",
]
skip_feature_sets = [["csr", "ssr"], ["csr", "hydrate"], ["ssr", "hydrate"], []]

[profile.release]
codegen-units = 1
lto = true
opt-level = 'z'

# Linting configuration
[lints.clippy]
all = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
cargo = { level = "warn", priority = -1 }
# Allow some pedantic lints that are too noisy
missing_errors_doc = "allow"
missing_panics_doc = "allow" 
module_name_repetitions = "allow"
must_use_candidate = "allow"
similar_names = "allow"
too_many_lines = "allow"
cast_precision_loss = "allow"
cast_possible_truncation = "allow"
cast_sign_loss = "allow"
redundant_else = "allow"
unnested_or_patterns = "allow"
needless_raw_string_hashes = "allow"
multiple_crate_versions = "allow"
ignored_unit_patterns = "allow"
match_same_arms = "allow"
clone_on_copy = "allow"
pub_underscore_fields = "allow"
used_underscore_binding = "allow"
redundant_closure_for_method_calls = "allow"
redundant_clone = "allow"
wildcard_imports = "allow"
no_effect_underscore_binding = "allow"
upper_case_acronyms = "allow"
derive_partial_eq_without_eq = "allow"
should_implement_trait = "allow"
unnecessary_wraps = "allow"
unused_self = "allow"
missing_const_for_fn = "allow"
future_not_send = "allow"
uninlined_format_args = "allow"
option_if_let_else = "allow"
needless_pass_by_value = "allow"
unused_async = "allow"
unsafe_derive_deserialize = "allow"
map_unwrap_or = "allow"
if_not_else = "allow"
needless_collect = "allow"
cast_lossless = "allow"
collapsible_match = "allow"
suboptimal_flops = "allow"
let_unit_value = "allow"
equatable_if_let = "allow"
redundant_pattern_matching = "allow"
single_char_pattern = "allow"
iter_with_drain = "allow"
branches_sharing_code = "allow"
format_push_string = "allow"
unused_enumerate_index = "allow"
useless_conversion = "allow"
unused_io_amount = "allow"
cast_possible_wrap = "allow"
swap_ptr_to_ref = "allow"
explicit_iter_loop = "allow"
manual_clamp = "allow"
mut_range_bound = "allow"
use_self = "allow"
float_cmp = "allow"
incompatible_msrv = "allow"
significant_drop_tightening = "allow"
trivially_copy_pass_by_ref = "allow"
derivable_impls = "allow"
literal_string_with_formatting_args = "allow"

[lints.rust]
rust_2018_idioms = "warn"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name   
output-name = "tailwind_actix"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg	
site-pkg-dir = "pkg"
# The tailwind input file.
#
# Optional, Activates the tailwind build
tailwind-input-file = "src/styles/global.css"
assets-dir = "public"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:4002"
# The port to use for automatic reload monitoring
reload-port = 4003
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false
